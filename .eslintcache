[{"F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\index.js":"1","F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\App.js":"2","F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\reportWebVitals.js":"3","F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\services\\address-book-service.js":"4","F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\services\\axios-service.js":"5","F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\config\\config.js":"6","F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\components\\address-book-home\\address-book-home.jsx":"7","F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\components\\address-book-form\\address-book-form.jsx":"8","F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\components\\address-book-display\\display.jsx":"9"},{"size":517,"mtime":1608700298487,"results":"10","hashOfConfig":"11"},{"size":743,"mtime":1608879659778,"results":"12","hashOfConfig":"11"},{"size":375,"mtime":1608700298490,"results":"13","hashOfConfig":"11"},{"size":666,"mtime":1608879683979,"results":"14","hashOfConfig":"11"},{"size":702,"mtime":1608879708764,"results":"15","hashOfConfig":"11"},{"size":61,"mtime":1608904535523,"results":"16","hashOfConfig":"11"},{"size":2038,"mtime":1609079492471,"results":"17","hashOfConfig":"11"},{"size":14464,"mtime":1608989568046,"results":"18","hashOfConfig":"11"},{"size":1858,"mtime":1608989861491,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"puxuw5",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\index.js",[],["41","42"],"F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\App.js",[],"F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\reportWebVitals.js",[],"F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\services\\address-book-service.js",[],"F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\services\\axios-service.js",[],["43","44"],"F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\config\\config.js",[],"F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\components\\address-book-home\\address-book-home.jsx",[],"F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\components\\address-book-form\\address-book-form.jsx",["45","46","47"],"import React from 'react';\r\nimport './address-book-form.scss';\r\nimport logo from '../../Assets/images/logo.jpeg';\r\nimport cross from '../../Assets/images/cross.jpeg';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport AddressBookService from '../../services/address-book-service'; \r\n\r\nconst initialState = {\r\n  fullName: '',\r\n  address: '',  \r\n  city: '',\r\n  state: '',\r\n  zip: '',\r\n  phoneNumber: '',\r\n  id: '',      \r\n  isUpdate: false,\r\n  isError: false,\r\n  error: {\r\n    fullName: '',\r\n    address: '',\r\n    city: '',\r\n    state: '',\r\n    zip: '',\r\n    phoneNumber: ''\r\n  },  \r\n  valid: {\r\n    fullName: '',\r\n    address: '',\r\n    city: '',\r\n    state: '',\r\n    zip: '',\r\n    phoneNumber: ''\r\n  }\r\n}\r\nclass AddressBookForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fullName: '',\r\n      address: '',\r\n      city: '',\r\n      state: '',\r\n      zip: '',\r\n      phoneNumber: '',\r\n      id: '',      \r\n      isUpdate: false,\r\n      isError: false,\r\n\r\n      error: {\r\n        fullName: '',\r\n        address: '',\r\n        city: '',\r\n        state: '',\r\n        zip: '',\r\n        phoneNumber: ''\r\n      },  \r\n      valid: {\r\n        fullName: '',\r\n        address: '',\r\n        city: '',\r\n        state: '',\r\n        zip: '',\r\n        phoneNumber: ''\r\n      }\r\n    }\r\n    this.nameChangeHandler = this.nameChangeHandler.bind(this);\r\n    this.phoneNumberChangeHandler = this.phoneNumberChangeHandler.bind(this);\r\n    this.addressChangeHandler = this.addressChangeHandler.bind(this);\r\n    this.cityChangeHandler = this.cityChangeHandler.bind(this);\r\n    this.stateChangeHandler = this.stateChangeHandler.bind(this);\r\n    this.zipChangeHandler = this.zipChangeHandler.bind(this);\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    let id = this.props.match.params.id;\r\n    if(id !== undefined && id!=='') {\r\n      this.getContactById(id);\r\n    }\r\n  }\r\n\r\n  getContactById = (id) => {\r\n    new AddressBookService().getContactById(id)\r\n    .then(responseDTO => {\r\n      let responseText = responseDTO.data;\r\n      this.setContactData(responseText.data);\r\n    }).catch(error => {\r\n      console.log(\"Error while fetching contact data by ID :\\n\" + JSON.stringify(error));\r\n    })\r\n  }\r\n  setContactData = (contact) => {\r\n    this.setState({\r\n      id: contact.id,\r\n      fullName: contact.fullName,\r\n      address: contact.address,\r\n      city: contact.city,\r\n      state: contact.state,\r\n      zip: contact.zip,\r\n      phoneNumber: contact.phoneNumber,\r\n      isUpdate: true\r\n    });\r\n  }\r\n\r\n  nameChangeHandler = (event) => {\r\n    this.setState({fullName: event.target.value});\r\n    this.checkName(event.target.value);\r\n  }\r\n  phoneNumberChangeHandler = (event) => {\r\n    this.setState({phoneNumber: event.target.value});\r\n    this.checkPhoneNumber(event.target.value);\r\n  }\r\n  addressChangeHandler = (event) => {\r\n    this.setState({address: event.target.value});\r\n    this.checkAddress(event.target.value);\r\n  }\r\n  cityChangeHandler = (event) => {\r\n    this.setState({city: event.target.value})\r\n    this.checkSelect('city', event.target.value);\r\n  }\r\n  stateChangeHandler = (event) => {\r\n    this.setState({state: event.target.value});\r\n    this.checkSelect('state', event.target.value);\r\n  }\r\n  zipChangeHandler = (event) => {\r\n    this.setState({zip: event.target.value});\r\n    this.checkZip(event.target.value);\r\n  }\r\n\r\n  initializeMessage = (field, errorMessage, validMessage) => {\r\n    this.setState(previousState => ({\r\n      error: {\r\n        ...previousState.error,\r\n        [field]: errorMessage\r\n      }\r\n    }));\r\n    this.setState(previousState => ({\r\n      valid: {\r\n        ...previousState.valid,\r\n        [field]: validMessage\r\n      }\r\n    }));\r\n  }\r\n  checkName = (nameValue) => {\r\n    if(nameValue.length === 0) {\r\n      this.initializeMessage('fullName', '', '');\r\n    } else {\r\n      const NAME_REGEX = RegExp(\"^[A-Z]{1}[a-z]{2,}[ ][A-Z]{1}[a-z]{2,}$\");\r\n      if(NAME_REGEX.test(nameValue)) {\r\n        this.initializeMessage('fullName', '', '');\r\n      } else {\r\n        this.initializeMessage('fullName', 'Full Name is Invalid!', '');\r\n      }\r\n    }\r\n  }\r\n  checkPhoneNumber = (phoneNumberValue) => {\r\n    if(phoneNumberValue.length === 0) {\r\n      this.initializeMessage('phoneNumber', 'Enter Phone Number', '');\r\n    } else {\r\n      const PHONE_NUMBER_REGEX = RegExp(\"((^\\\\+?)(([0-9]{2,3})(\\\\s))?)[1-9]{1}[0-9]{9}$\");\r\n      if(PHONE_NUMBER_REGEX.test(phoneNumberValue)) {\r\n        this.initializeMessage('phoneNumber', '', '');\r\n      } else {\r\n        this.initializeMessage('phoneNumber', 'Phone Number is Invalid!', '');\r\n      }\r\n    }\r\n  }\r\n  checkAddress = (addressValue) => {\r\n    if(addressValue.length === 0) {\r\n      this.initializeMessage('address', 'Enter Address', '');\r\n    } else {\r\n      const ADDRESS_REGEX = RegExp(\"^[A-Za-z0-9-,\\\\.]{2,}([\\\\s][A-Za-z0-9-,\\\\.]{2,}){0,}$\");\r\n      if(ADDRESS_REGEX.test(addressValue)) {\r\n        this.initializeMessage('address', '', '');\r\n      } else {\r\n        this.initializeMessage('address', 'Address is Invalid!', '');\r\n      }\r\n    }\r\n  }\r\n  checkSelect = (field, fieldValue) => {\r\n    if(fieldValue.length === 0) {\r\n      this.initializeMessage(field, 'Select this', '');\r\n    } else {\r\n      this.initializeMessage(field, '', '');\r\n    }    \r\n  }\r\n  checkZip = (zipValue) => {\r\n    if(zipValue.length === 0) {\r\n      this.initializeMessage('zip', 'Enter ZipCode', '');\r\n    } else {\r\n      const ZIP_CODE_REGEX = RegExp(\"^[1-9]{1}[0-9]{5}$\");\r\n      if(ZIP_CODE_REGEX.test(zipValue)) {\r\n        this.initializeMessage('zip', '', '');\r\n      } else {\r\n        this.initializeMessage('zip', 'Invalid zipcode', '');\r\n      }\r\n    }\r\n  }\r\n\r\n  checkGlobalError = () =>{\r\n    if(this.state.error.fullName.length === 0 && this.state.error.address.length === 0 && this.state.error.city.length === 0 \r\n      && this.state.error.state.length === 0 && this.state.error.zip.length === 0 && this.state.error.phoneNumber.length === 0) {\r\n        this.setState({isError: false});\r\n      } else {\r\n        this.setState({isError: true});\r\n      }\r\n  }\r\n\r\n  checkValidations = async () => {\r\n    await this.checkName(this.state.fullName);\r\n    await this.checkAddress(this.state.address);\r\n    await this.checkSelect('city',this.state.city);\r\n    await this.checkSelect('state',this.state.state);\r\n    await this.checkZip(this.state.zip);\r\n    await this.checkPhoneNumber(this.state.phoneNumber);\r\n    await this.checkGlobalError();\r\n    return (this.state.isError);\r\n  }\r\n  save = async (event) => {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    \r\n    saveOperation: {         \r\n      if(await this.checkValidations()) {\r\n        break saveOperation;\r\n      }    \r\n      let contactObject = {\r\n        id: this.state.id,\r\n        fullName: this.state.fullName,\r\n        address: this.state.address,\r\n        city: this.state.city,\r\n        state: this.state.state,\r\n        zip: this.state.zip,\r\n        phoneNumber: this.state.phoneNumber\r\n      }\r\n      if(this.state.isUpdate) {\r\n        new AddressBookService().updateContact(contactObject)\r\n        .then(responseText => {\r\n          alert(\"Updated\\n\");\r\n          this.reset();\r\n          this.props.history.push(\"/home\");\r\n        }).catch(error => {\r\n          console.log(\"Error occured\\n\" + JSON.stringify(error));\r\n        })\r\n      } else {\r\n        new AddressBookService().addContact(contactObject)\r\n        .then(responseDTO => {\r\n          let responseText = responseDTO.data;\r\n          alert(\"Contact Added\");\r\n          this.reset();\r\n          this.props.history.push(\"/home\");\r\n        }).catch(error => {\r\n          console.log(\"Error occured\\n\" + JSON.stringify(error));\r\n        });\r\n        this.reset();\r\n      }\r\n    }\r\n  }\r\n\r\n  reset = () => {\r\n    this.setState({...initialState});\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"body\">\r\n        <header className=\"headerContainer header\">\r\n            <div className=\"logoContainer\">\r\n                <img src={logo} alt=\"\" />\r\n                <div>\r\n                    <span className=\"address-text\">ADDRESS</span><br />\r\n                    <span className=\"address-text book-text\">BOOK</span>\r\n                </div>\r\n            </div>\r\n        </header>\r\n        <div className=\"form-content\">\r\n            <form className=\"form\" action=\"#\" onSubmit={this.save} onReset={this.reset}>\r\n                <div className=\"form-head\">\r\n                    <div className=\"form-text\">Person Address Form</div>\r\n                    <div>\r\n                        <Link to=''><img className=\"cancel-img\" src={cross} alt=\"\" /></Link>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row-content\">\r\n                    <label htmlFor=\"full-name\" className=\"label text\">Full Name</label>\r\n                    <div className=\"validity-check\">\r\n                        <input className=\"input\" value={this.state.fullName} onChange={this.nameChangeHandler} type=\"text\" id=\"full-name\" name=\"full-name\" required />\r\n                        <valid-message className=\"valid-full-name\" htmlFor=\"full-name\">{this.state.valid.fullName}</valid-message>\r\n                        <error-output className=\"full-name-error\" htmlFor=\"full-name\">{this.state.error.fullName}</error-output>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row-content\">\r\n                    <label htmlFor=\"tel\" className=\"label text\">Phone Number</label>\r\n                    <div className=\"validity-check\">\r\n                        <input className=\"input\" value={this.state.phoneNumber} onChange={this.phoneNumberChangeHandler} type=\"tel\" id=\"tel\" name=\"tel\" />\r\n                        <valid-message className=\"valid-tel\" htmlFor=\"tel\">{this.state.valid.phoneNumber}</valid-message>\r\n                        <error-output className=\"tel-error\" htmlFor=\"tel\">{this.state.error.phoneNumber}</error-output>\r\n                    </div>\r\n                </div>\r\n                <div className=\"row-content\">\r\n                    <label htmlFor=\"address\" className=\"label text\">Address</label>\r\n                    <div className=\"validity-check\">\r\n                        <textarea className=\"input text\" value={this.state.address} onChange={this.addressChangeHandler} name=\"address\" id=\"address\" style={{height: \"100px\"}} ></textarea>\r\n                        <valid-message className=\"valid-address\" htmlFor=\"address\">{this.state.valid.address}</valid-message>\r\n                        <error-output className=\"address-error\" htmlFor=\"address\">{this.state.error.address}</error-output>\r\n                    </div>\r\n                </div>\r\n                <div className=\"select-elements\">\r\n                    <div name=\"select-city\" id=\"select-city\" className=\"select-div\">\r\n                        <label htmlFor=\"city\" className=\"label text\">City</label>\r\n                        <div className=\"validity-check\">\r\n                          <select name=\"city\" id=\"city\" value={this.state.city} onChange={this.cityChangeHandler}>\r\n                            <option value=\"\" hidden>Select City</option>\r\n                            <option value=\"Allahabad\">Allahabad</option>\r\n                            <option value=\"Mumbai\">Mumbai</option>\r\n                            <option value=\"Guwahati\">Guwahati</option>\r\n                            <option value=\"Lucknow\">Lucknow</option>\r\n                            <option value=\"Pune\">Pune</option>\r\n                            <option value=\"Ahmedabad\">Ahmedabad</option>\r\n                            <option value=\"Somnath\">Somnath</option>\r\n                            <option value=\"Goa\">Goa</option>\r\n                          </select>\r\n                          <valid-message className=\"valid-city\" htmlFor=\"city\">{this.state.valid.city}</valid-message>\r\n                          <error-output className=\"city-error\" htmlFor=\"city\">{this.state.error.city}</error-output>\r\n                        </div>\r\n                    </div>\r\n                    <div name=\"select-state\" id=\"select-state\" className=\"select-div\">\r\n                        <label htmlFor=\"state\" className=\"label text\">State</label>\r\n                        <div className=\"validity-check\">\r\n                          <select name=\"state\" id=\"state\" value={this.state.state} onChange={this.stateChangeHandler}>\r\n                            <option value=\"\" hidden>Select State</option>\r\n                            <option value=\"Assam\">Assam</option>\r\n                            <option value=\"Rajasthan\">Rajasthan</option>\r\n                            <option value=\"Uttar Pradesh\">Uttar Pradesh</option>\r\n                            <option value=\"Maharashtra\">Maharashtra</option>\r\n                            <option value=\"Punjab\">Punjab</option>\r\n                            <option value=\"Gujarat\">Gujarat</option>\r\n                            <option value=\"Goa\">Goa</option>\r\n                          </select>\r\n                          <valid-message className=\"valid-state\" htmlFor=\"state\">{this.state.valid.state}</valid-message>\r\n                          <error-output className=\"state-error\" htmlFor=\"state\">{this.state.error.state}</error-output>\r\n                        </div>\r\n                    </div>\r\n                    <div name=\"select-zip\" id=\"select-zip\" className=\"select-div\">\r\n                        <label htmlFor=\"zip\" className=\"label text\">Zip Code</label>\r\n                        <div className=\"validity-check\">\r\n                          <input className=\"input\" type=\"postal\" id=\"zip\"  value={this.state.zip} onChange={this.zipChangeHandler} />                          \r\n                          <valid-message className=\"valid-zip\" htmlFor=\"zip\">{this.state.valid.zip}</valid-message>\r\n                          <error-output className=\"zip-error\" htmlFor=\"zip\">{this.state.error.zip}</error-output>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"buttonParent\">\r\n                    <div className=\"submit-reset\">\r\n                        <button type=\"submit\" className=\"button submitButton\">{this.state.isUpdate ? 'Update' : 'Add'}</button>\r\n                        <button type=\"reset\" className=\"resetButton button\">Reset</button>\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(AddressBookForm);","F:\\Capgemini workspace\\AddressBookAppReact\\address-book-react-app\\src\\components\\address-book-display\\display.jsx",[],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"48","replacedBy":"52"},{"ruleId":"50","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":221,"column":5,"nodeType":"56","messageId":"57","endLine":255,"endColumn":6},{"ruleId":"54","severity":1,"message":"58","line":223,"column":9,"nodeType":"59","messageId":"60","endLine":223,"endColumn":29},{"ruleId":"61","severity":1,"message":"62","line":246,"column":15,"nodeType":"63","messageId":"64","endLine":246,"endColumn":27},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],["65"],["66"],"no-labels","Unexpected labeled statement.","LabeledStatement","unexpectedLabel","Unexpected label in break statement.","BreakStatement","unexpectedLabelInBreak","no-unused-vars","'responseText' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]